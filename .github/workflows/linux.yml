# This is a basic workflow to help you get started with Actions

name: Linux-CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: ${{ matrix.cfg.os }}-${{ matrix.cfg.compiler }}
    runs-on: ${{ matrix.cfg.os }}
    # The type of runner that the job will run on
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { os: ubuntu-18.04, cpp-version: clang-7,   cc: clang-7,   cxx: clang++-7}
          - { os: ubuntu-18.04, cpp-version: g++-7,     cc: gcc-7,     cxx: g++-7 }
          - { os: ubuntu-20.04, cpp-version: clang-10,  cc: clang-10,  cxx: clang++-10}
          - { os: ubuntu-20.04, cpp-version: g++-10,    cc: gcc-10,    cxx: g++-10}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install packages
        run: sudo apt install -y ninja-build libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev mesa-common-dev ${{matrix.cfg.cpp-version}}
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: configure
        env:
          CXX: ${{matrix.cfg.cxx}}
          CC: ${{matrix.cfg.cc}}
        run: |
          mkdir build
          cd build
          pwd
          cmake -G Ninja -DCMAKE_BUILD_TYPE=RELEASE -DDI_BUILD_TESTS=ON -DDI_BUILD_DEBUGGER=OFF ..
      - name: build
        run:  cmake --build build --parallel
      - name: run
        run: |
          cd build
          ./DiRender ../sample.toml
      - name: test
        run: |
          cd build
          ctest -T test --verbose
